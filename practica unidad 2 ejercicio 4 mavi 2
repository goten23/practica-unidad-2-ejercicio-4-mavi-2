#include <iostream>
#include <Box2D/Box2D.h>
#include <SDL2/SDL.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 BOX_SIZE = 5.0f;

int main(int argc, char* argv[]) {
    // Inicialización de SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Caja Deslizándose", 100, 100, 800, 600, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        SDL_DestroyWindow(window);
        std::cerr << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    // Configuración del mundo de Box2D
    b2Vec2 gravity(0.0f, 0.0f);
    b2World world(gravity);

    // Creación del plano
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(WORLD_WIDTH / 2.0f, 10.0f);
    b2Body* groundBody = world.CreateBody(&groundBodyDef);

    b2PolygonShape groundBox;
    groundBox.SetAsBox(WORLD_WIDTH / 2.0f, 10.0f);
    groundBody->CreateFixture(&groundBox, 0.0f);

    // Creación de la caja
    b2BodyDef boxBodyDef;
    boxBodyDef.type = b2_dynamicBody;
    boxBodyDef.position.Set(WORLD_WIDTH / 2.0f, 20.0f);
    b2Body* boxBody = world.CreateBody(&boxBodyDef);

    b2PolygonShape boxShape;
    boxShape.SetAsBox(BOX_SIZE / 2.0f, BOX_SIZE / 2.0f);

    b2FixtureDef boxFixtureDef;
    boxFixtureDef.shape = &boxShape;
    boxFixtureDef.density = 1.0f;
    boxFixtureDef.friction = 0.3f;  // Coeficiente de rozamiento
    boxBody->CreateFixture(&boxFixtureDef);

    // Bucle principal
    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
        }

        const Uint8* currentKeyStates = SDL_GetKeyboardState(NULL);
        if (currentKeyStates[SDL_SCANCODE_LEFT]) {
            boxBody->ApplyForceToCenter(b2Vec2(-50.0f, 0.0f), true);
        }
        if (currentKeyStates[SDL_SCANCODE_RIGHT]) {
            boxBody->ApplyForceToCenter(b2Vec2(50.0f, 0.0f), true);
        }

        world.Step(1.0f / 60.0f, 6, 2);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);

        // Renderizar el plano
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_Rect groundRect = {0, 580, 800, 20};
        SDL_RenderFillRect(renderer, &groundRect);

        // Renderizar la caja
        b2Vec2 position = boxBody->GetPosition();
        SDL_Rect boxRect = {
            static_cast<int>(position.x * 800.0f / WORLD_WIDTH - BOX_SIZE * 800.0f / WORLD_WIDTH / 2.0f),
            600 - static_cast<int>(position.y * 600.0f / WORLD_HEIGHT + BOX_SIZE * 600.0f / WORLD_HEIGHT / 2.0f),
            static_cast<int>(BOX_SIZE * 800.0f / WORLD_WIDTH),
            static_cast<int>(BOX_SIZE * 600.0f / WORLD_HEIGHT)
        };
        SDL_RenderFillRect(renderer, &boxRect);

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
